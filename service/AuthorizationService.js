'use strict';


/**
 * Obtain user's consent
 * ### Implementations notes  The client application invokes the /authorize endpoint to obtain an authorization_code. It then sends this code to the /token endpoint to exchange it for an access_token. 
 *
 * response_type String response_type=code indicates that the expected response is an authorisation code.
 * client_id String Identifier of the client application (obtained when saved on the OAuth2 server)
 * redirect_uri String Redirect Url to which the authorization_code will be returned. This must match one of those saved by the client and be **URL-encoded**.
 * scope String List of scopes of the resources that the application wants to access **(separator: URL-encoded space).**  The list must contain **at least one scope that is recognised** by the OAuth2 server and whose use is granted to the client application. If not, a 400 error (Bad Request) is returned.     Any scope not recognised is ignored.   By default, the list of scopes authorised for the client (by the server-side configuration) will be used.  Ex: scope=r_paiements%20w_paiements  (optional)
 * state String Character string generated by the client application during the call. This is sent to the client by the server, without processing, in a state parameter added to the redirect URL. (CSRF) – **Optional but very strongly recommended.** (optional)
 * response_mode String Indicates how the client wishes to receive the response elements.  Values supported (case-sensitive):   * **query** (the response elements are added to the redirect_uri in the form of parameters i.e. after a \"?\")  * **fragment** (the response elements are added to the redirect_uri in the form of a fragment i.e after a \"#\").   Default values:   * fragment if response_type= token  * query if response_type= code  (optional)
 * no response value expected for this operation
 **/
exports.authorizeGET = function(response_type,client_id,redirect_uri,scope,state,response_mode) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Obtain user's consent
 * ### Implementations notes  The client application invokes the /authorize endpoint to obtain an authorization_code. It then sends this code to the /token endpoint to exchange it for an access_token. 
 *
 * body AuthorizeRequestBody  (optional)
 * response_type String response_type=code indicates that the expected response is an authorisation code.
 * client_id String Identifier of the client application (obtained when saved on the OAuth2 server)
 * redirect_uri String Redirect Url to which the authorization_code will be returned. This must match one of those saved by the client and be **URL-encoded**.
 * scope String List of scopes of the resources that the application wants to access **(separator: URL-encoded space).**  The list must contain **at least one scope that is recognised** by the OAuth2 server and whose use is granted to the client application. If not, a 400 error (Bad Request) is returned.     Any scope not recognised is ignored.   By default, the list of scopes authorised for the client (by the server-side configuration) will be used.  Ex: scope=r_paiements%20w_paiements  (optional)
 * state String Character string generated by the client application during the call. This is sent to the client by the server, without processing, in a state parameter added to the redirect URL. (CSRF) – **Optional but very strongly recommended.** (optional)
 * response_mode String Indicates how the client wishes to receive the response elements.  Values supported (case-sensitive):   * **query** (the response elements are added to the redirect_uri in the form of parameters i.e. after a \"?\")  * **fragment** (the response elements are added to the redirect_uri in the form of a fragment i.e after a \"#\").   Default values:   * fragment if response_type= token  * query if response_type= code  (optional)
 * no response value expected for this operation
 **/
exports.create = function(body,response_type,client_id,redirect_uri,scope,state,response_mode) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}

