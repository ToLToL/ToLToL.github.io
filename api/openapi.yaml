openapi: 3.0.1
info:
  title: Bouygues Telecom OAuth2 / OpenID Connect
  version: 0.3.0
servers:
- url: https://oauth2.bouyguestelecom.fr
paths:
  /authorize:
    get:
      tags:
      - authorization
      summary: Obtain user's consent
      description: |
        ### Implementations notes

        The client application invokes the /authorize endpoint to obtain an authorization_code. It then sends this code to the /token endpoint to exchange it for an access_token.
      operationId: authorizeGET
      parameters:
      - name: response_type
        in: query
        description: response_type=code indicates that the expected response is an
          authorisation code.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: client_id
        in: query
        description: Identifier of the client application (obtained when saved on
          the OAuth2 server)
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        description: Redirect Url to which the authorization_code will be returned.
          This must match one of those saved by the client and be **URL-encoded**.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: scope
        in: query
        description: "List of scopes of the resources that the application wants to\
          \ access **(separator: URL-encoded space).**\n\nThe list must contain **at\
          \ least one scope that is recognised** by the OAuth2 server and whose use\
          \ is granted to the client application. If not, a 400 error (Bad Request)\
          \ is returned. \n  \nAny scope not recognised is ignored. \n\nBy default,\
          \ the list of scopes authorised for the client (by the server-side configuration)\
          \ will be used. \nEx: scope=r_paiements%20w_paiements\n"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: Character string generated by the client application during the
          call. This is sent to the client by the server, without processing, in a
          state parameter added to the redirect URL. (CSRF) – **Optional but very
          strongly recommended.**
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: response_mode
        in: query
        description: "Indicates how the client wishes to receive the response elements.\n\
          \nValues supported (case-sensitive): \n\n* **query** (the response elements\
          \ are added to the redirect_uri in the form of parameters i.e. after a \"\
          ?\") \n* **fragment** (the response elements are added to the redirect_uri\
          \ in the form of a fragment i.e after a \"#\"). \n\nDefault values: \n\n\
          * fragment if response_type= token \n* query if response_type= code\n"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "302":
          description: "In the event of a functional error (not linked to the syntactic\
            \ or semantic validity of the request). \nThe error message is provided\
            \ by a redirection to the redirect_uri with the following parameters:\
            \ \n* error  \n* error_description\n* error_status \n\nExample scenario:\n\
            * The user does not give his consent\n* The user's authentication fails\n\
            \nExample response: \nhttp://redirect_uri?error=server_error&error_description=service_ticket_validation_error\n\
            \nList of possible error codes:\n* **unauthorized_client (401):** The\
            \ flow (response_type parameter) requested is not authorised for the client.\
            \ \n* **access_denied (403):**\n  * The user has not given his consent.\n\
            \  * The user's authentication has failed. \n* **server_error(500):**\
            \ unexpected internal error\n* **server_error(502):** A back-end system\
            \ called by the OAuth2 server is unavailable.\n"
        "400":
          description: "* missing parameter\n* invalid parameter (e.g. response_type\
            \ or response_mode not recognised) \n* unauthorised redirect URL \n* none\
            \ of the scopes provided is recognised and authorised\n"
        "401":
          description: |
            * client application not recognised
      x-swagger-router-controller: Authorization
    post:
      tags:
      - authorization
      summary: Obtain user's consent
      description: |
        ### Implementations notes

        The client application invokes the /authorize endpoint to obtain an authorization_code. It then sends this code to the /token endpoint to exchange it for an access_token.
      operationId: create
      parameters:
      - name: response_type
        in: query
        description: response_type=code indicates that the expected response is an
          authorisation code.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: client_id
        in: query
        description: Identifier of the client application (obtained when saved on
          the OAuth2 server)
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        description: Redirect Url to which the authorization_code will be returned.
          This must match one of those saved by the client and be **URL-encoded**.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: scope
        in: query
        description: "List of scopes of the resources that the application wants to\
          \ access **(separator: URL-encoded space).**\n\nThe list must contain **at\
          \ least one scope that is recognised** by the OAuth2 server and whose use\
          \ is granted to the client application. If not, a 400 error (Bad Request)\
          \ is returned. \n  \nAny scope not recognised is ignored. \n\nBy default,\
          \ the list of scopes authorised for the client (by the server-side configuration)\
          \ will be used. \nEx: scope=r_paiements%20w_paiements\n"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: Character string generated by the client application during the
          call. This is sent to the client by the server, without processing, in a
          state parameter added to the redirect URL. (CSRF) – **Optional but very
          strongly recommended.**
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: response_mode
        in: query
        description: "Indicates how the client wishes to receive the response elements.\n\
          \nValues supported (case-sensitive): \n\n* **query** (the response elements\
          \ are added to the redirect_uri in the form of parameters i.e. after a \"\
          ?\") \n* **fragment** (the response elements are added to the redirect_uri\
          \ in the form of a fragment i.e after a \"#\"). \n\nDefault values: \n\n\
          * fragment if response_type= token \n* query if response_type= code\n"
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded:':
            schema:
              $ref: '#/components/schemas/authorizeRequestBody'
            example:
              client_id: exampleAppId
              response_type: code
              redirect_url: http://example.com/cb
              scope: r_paiements w_paiements
              state: 123456789ABC
      responses:
        "302":
          description: "In the event of a functional error (not linked to the syntactic\
            \ or semantic validity of the request). \nThe error message is provided\
            \ by a redirection to the redirect_uri with the following parameters:\
            \ \n* error  \n* error_description\n* error_status \n\nExample scenario:\n\
            * The user does not give his consent\n* The user's authentication fails\n\
            \nExample response: \nhttp://redirect_uri?error=server_error&error_description=service_ticket_validation_error\n\
            \nList of possible error codes:\n* **unauthorized_client (401):** The\
            \ flow (response_type parameter) requested is not authorised for the client.\
            \ \n* **access_denied (403):**\n  * The user has not given his consent.\n\
            \  * The user's authentication has failed. \n* **server_error(500):**\
            \ unexpected internal error\n* **server_error(502):** A back-end system\
            \ called by the OAuth2 server is unavailable.\n"
        "400":
          description: "* missing parameter\n* invalid parameter (e.g. response_type\
            \ or response_mode not recognised) \n* unauthorised redirect URL \n* none\
            \ of the scopes provided is recognised and authorised\n"
        "401":
          description: |
            * client application not recognised
      x-swagger-router-controller: Authorization
  /token:
    post:
      tags:
      - token
      summary: get access token
      operationId: tokenPOST
      parameters:
      - name: Authorisation
        in: header
        description: "HTTP header used to convey the credentials of the client application.\
          \ \nThis must match the \"Basic authentication scheme\" \nMandatory if the\
          \ client application and has a password. \nIf present, this header takes\
          \ precedence over the client_id parameter\n"
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: grant_type
        in: query
        description: Type of authorisation presented to obtain the access token.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: code
        in: query
        description: Corresponds to the value of the authorisation code obtained with
          the previous call of the /authorize.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        description: Redirect URL of the client application. This must match the URL
          entered during the authorisation code request.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: client_id
        in: query
        description: "The identifier of the client application.  \nThis parameter\
          \ and the Authorization header are mutually exclusive.  \nIt is mandatory\
          \ if the client application does not have a password.\n"
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
        "400":
          description: "* missing parameter \n* invalid parameter (e.g. grant_type\
            \ not recognised) \n* unauthorised redirect URL \n* client application\
            \ not recognised\n"
        "401":
          description: |
            * error linked to the authentication of the client application
        "500":
          description: |
            * unexpected internal error
      x-swagger-router-controller: Token
components:
  schemas:
    tokenResponse:
      required:
      - access_token
      type: object
      properties:
        access_token:
          type: string
          description: value of the access_token
          example: at-bcc3f013-248a-44d1-8ed7-a51cc2744bea
        token_type:
          type: string
          description: Type of the token. Always Bearer
          example: Bearer
        expires_in:
          type: string
          description: |
            lifespan of the access_token in seconds (required). The client is strongly recommended to verify the expiry date before using a token.
            If it has expired, the client must request another token on /token by presenting a refresh_token or reissuing an /authorize if the refresh quota has run out.
          example: "3600"
        refresh_token:
          type: integer
          description: Value of the refresh token. Present if the client is configured
            to receive it and if the maximum number of renewals has not been reached.
          format: int32
        refresh_token_ttl:
          type: string
          description: remaining life span of the refresh token in seconds. Present
            if refresh_token is present.
        refresh_credit:
          type: integer
          description: number of remaining renewals. This decreases with every refresh.
            The refresh_token can no longer be used if this number falls to 0. Present
            if the client is configured to receive a refresh_token.
          format: int32
          example: 7200
        scope:
          type: string
          description: scopes recognised by the server, authorised by the user (if
            consent requested) and granted to the client. (list of elements separated
            by a space)
          example: r_paiements w_paiements
      example:
        access_token: at-bcc3f013-248a-44d1-8ed7-a51cc2744bea
        refresh_token: 0
        refresh_credit: 7200
        scope: r_paiements w_paiements
        token_type: Bearer
        expires_in: "3600"
        refresh_token_ttl: refresh_token_ttl
    authorizeRequestBody:
      required:
      - access_token
      type: object
      properties:
        access_token:
          type: string
          description: value of the access_token
          example: at-bcc3f013-248a-44d1-8ed7-a51cc2744bea
        token_type:
          type: string
          description: Type of the token. Always Bearer
          example: Bearer
        expires_in:
          type: string
          description: |
            lifespan of the access_token in seconds (required). The client is strongly recommended to verify the expiry date before using a token.
            If it has expired, the client must request another token on /token by presenting a refresh_token or reissuing an /authorize if the refresh quota has run out.
          example: "3600"
        refresh_token:
          type: integer
          description: Value of the refresh token. Present if the client is configured
            to receive it and if the maximum number of renewals has not been reached.
          format: int32
        refresh_token_ttl:
          type: string
          description: remaining life span of the refresh token in seconds. Present
            if refresh_token is present.
        refresh_credit:
          type: integer
          description: number of remaining renewals. This decreases with every refresh.
            The refresh_token can no longer be used if this number falls to 0. Present
            if the client is configured to receive a refresh_token.
          format: int32
          example: 7200
        scope:
          type: string
          description: scopes recognised by the server, authorised by the user (if
            consent requested) and granted to the client. (list of elements separated
            by a space)
          example: r_paiements w_paiements
